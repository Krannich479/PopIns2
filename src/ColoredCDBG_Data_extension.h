/*!
* \file    src/ColoredCDBG_Data_extension.h
* \brief   Library for extending the functionality of the colored compacted DBG by implementing the data wrapper CCDBG_Data_t
*
*/
#ifndef COLORED_CDBG_DATA_EXTENSION_
#define COLORED_CDBG_DATA_EXTENSION_



// =========================
// Includes + defines
// =========================
#include <bifrost/ColoredCDBG.hpp>      /* has the CCDBG_Data_t template */
#include <bifrost/DataManager.hpp>
#include <bifrost/UnitigMap.hpp>

#include <string>                       /* std::to_string() */
#include <tuple>                        /* std::Pair */
#include <cstdint>                      /* uint8_t */



static const uint8_t bitmask_encoder_successor[256] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0C, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     // t[4][1]='A', t[4][3]='C', t[4][7]='G'
  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     // t[5][4]='T'
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static const uint8_t bitmask_encoder_predecessor[256] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     // t[4][1]='A', t[4][3]='C', t[4][7]='G'
  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     // t[5][4]='T'
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static const char bitmask_decoder[16] = {
    0x4E, 0x4E, 0x4E, 0x41,     // N, N, N, A
    0x4E, 0x4E, 0x4E, 0x43,     // N, N, N, C
    0x4E, 0x4E, 0x4E, 0x47,     // N, N, N, G
    0x41, 0x43, 0x47, 0x54      // A, C, G, T
};


// =========================
// Structs
// =========================
/*!
* \class        UnitigExtension
* \headerfile   src/ColoredCDBG_Data_extension.h
* \brief        Struct extending the functionality of the colored compacted DBG.
* \details      The struct has to inherit from the CCDBG_Data_t struct and implement at least all its static functions.
* \ref          https://github.com/pmelsted/bfgraph/blob/master/src/ColoredCDBG.hpp
*/
struct UnitigExtension : public CCDBG_Data_t<UnitigExtension>, CDBG_Data_t<UnitigExtension> {

    private:
        unsigned ID;

        float entropy;

        /* A neighbourPair (uint8_t) is a 8-bit int storing the predecessor in
         * the third and fourth last bits (xxxxXXxx) and the successor in the last
         * and second last bits (xxxxxxXX), where the two bits encode A, C, G, and T.
         */
        std::vector<uint8_t> neighborPairs;

        const static uint8_t UNDISCOVERED = 0x0;
        const static uint8_t SEEN = 0x1;
        const static uint8_t VISITED = 0x2;
        uint8_t DFS_STATUS;

    public:

        // --------------
        // | Functions  |
        // --------------
        UnitigExtension() : ID(0), entropy(-1), DFS_STATUS(UNDISCOVERED) {}

        unsigned getID() const {return ID;}
        void setID(const unsigned id) {ID = id;}

        float getEntropy() const {return entropy;}
        void setEntropy(const float e) {entropy = e;}

        static void join(const UnitigColorMap<UnitigExtension>& um_dest,
                         const UnitigColorMap<UnitigExtension>& um_src);
        static void sub(UnitigExtension* data_dest,
                        const UnitigColors &uc_dest,
                        const UnitigMapBase &um_dest,
                        const UnitigColorMap<UnitigExtension> &um_src,
                        const bool last_extraction);
        string serialize() const;

        // TODO: getter /setter for neighborPairs, maybe pull global functions in here

        inline void set_undiscovered() { DFS_STATUS = UNDISCOVERED; }
        inline void set_seen() { DFS_STATUS = SEEN; }
        inline void set_visited() { DFS_STATUS = VISITED; }

        inline bool is_undiscovered() const { return (DFS_STATUS == UNDISCOVERED); }
        inline bool is_seen() const { return (DFS_STATUS == SEEN); }
        inline bool is_visited() const { return (DFS_STATUS == VISITED); }

};


// =========================
// Global functions
// =========================
uint8_t setNeighborPairFromBases(const uint8_t predecessor, const uint8_t successor);

std::pair<uint8_t, uint8_t> getBasesFromNeighborPair(const uint8_t neighborPair);





#endif /*COLORED_CDBG_DATA_EXTENSION_*/
